{
	"info": {
		"_postman_id": "b8114dcf-cbef-43b9-9e0f-388e4bea99c0",
		"name": "02_HW_Postman_gr29",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"\r",
							"// method Get - Save - Send\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alina\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"\r",
							"pm.test(\"age is correct\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"33\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"salary is correct\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1500);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data \r",
							"console.log(\"req = \", req)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name;\r",
							"let resp_name = jsonData.name;\r",
							"\r",
							"pm.test(\"name request\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age;\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"age request\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let req_salary = req.salary;\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"pm.test(\"salary request\", function () {\r",
							"    pm.expect(resp_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"// сервер ожидает salary = Number, нужно преобразовать req_salary в тип число\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let req_u_salary_1_5_year = req.salary * 4;\r",
							"let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"console.log(req_u_salary_1_5_year);\r",
							"console.log(resp_u_salary_1_5_year);\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(req_u_salary_1_5_year).to.eql(resp_u_salary_1_5_year);\r",
							"\t});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alina",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// // 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name;\r",
							"let resp_name = jsonData.name;\r",
							"\r",
							"pm.test(\"name_request\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age;\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"age_request\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let req_salary = req.salary;\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"pm.test(\"salary_request\", function () {\r",
							"    pm.expect(resp_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Dog_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"name_Luky\", function () {\r",
							"\tpm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"age_Luky\", function () {\r",
							"\tpm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alina&age=33&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alina"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name;\r",
							"let resp_name = jsonData.name;\r",
							"\r",
							"pm.test(\"name_request\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age;\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"age_request\", function () {\r",
							"    pm.expect(resp_age).to.eql(Number(req_age));\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let req_salary_0 = req.salary;\r",
							"let resp_salary_0 = jsonData.salary[0];\r",
							"\r",
							"pm.test(\"salary_0\", function () {\r",
							"    pm.expect(resp_salary_0).to.eql(Number(req_salary_0));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let req_salary_1elem = req.salary;\r",
							"let req_salary1 = Number(req_salary_1elem) * 2;\r",
							"let resp_salary_1elem  = jsonData.salary[1];\r",
							"console.log(req_salary1);\r",
							"console.log(resp_salary_1elem);\r",
							"\r",
							"pm.test(\"salary_1\", function () {\r",
							"\tpm.expect(Number(resp_salary_1elem)).to.eql(req_salary1);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"let req_salary_2elem = req.salary;\r",
							"let req_salary2 = Number(req_salary_1elem) * 3;\r",
							"let resp_salary_2elem  = jsonData.salary[2];\r",
							"console.log(req_salary2);\r",
							"console.log(resp_salary_2elem);\r",
							"\r",
							"pm.test(\"salary_2\", function () {\r",
							"\tpm.expect(Number(resp_salary_2elem)).to.eql(req_salary2);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"let user_name = jsonData.name;\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"let user_age = jsonData.age;\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"let user_salary = jsonData.salary[0];\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", \"user_name\");\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", \"user_age\");\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", \"user_salary\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"let seriesSalary = jsonData.salary;\r",
							"seriesSalary.forEach(salary => console.log(salary));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alina&age=33&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alina"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		}
	]
}